$zenpack.license.header

#for $i in $imports
$i
#end for

AVAILABILITY = 'AVAILABILITY'
PERCENT = 'policyPercentageTrigger'
THRESHOLD = 'policyThresholdTrigger'
RP = '${zenpack.id}'


def GUID(obj):
    return IGlobalIdentifier(obj).getGUID()


def getRedundancyTriggers(guid, format, **kwargs):
    """Return a general redundancy set of triggers."""

    return (
        Trigger(guid, format % 'DOWN', PERCENT, AVAILABILITY, dict(
            kwargs, state='DOWN', dependentState='DOWN', threshold='100',
        )),
        Trigger(guid, format % 'DEGRADED', THRESHOLD, AVAILABILITY, dict(
            kwargs, state='DEGRADED', dependentState='DEGRADED', threshold='1',
        )),
        Trigger(guid, format % 'ATRISK_1', THRESHOLD, AVAILABILITY, dict(
            kwargs, state='ATRISK', dependentState='DOWN', threshold='1',
        )),
        Trigger(guid, format % 'ATRISK_2', THRESHOLD, AVAILABILITY, dict(
            kwargs, state='ATRISK', dependentState='ATRISK', threshold='1',
        )),
    )


def getPoolTriggers(guid, format, **kwargs):
    """Return a general pool set of triggers."""

    return (
        Trigger(guid, format % 'DOWN', PERCENT, AVAILABILITY, dict(
            kwargs, state='DOWN', dependentState='DOWN', threshold='100',
        )),
        Trigger(guid, format % 'DEGRADED', THRESHOLD, AVAILABILITY, dict(
            kwargs, state='DEGRADED', dependentState='DEGRADED', threshold='1',
        )),
        Trigger(guid, format % 'ATRISK_1', THRESHOLD, AVAILABILITY, dict(
            kwargs, state='DEGRADED', dependentState='DOWN', threshold='1',
        )),
    )


class BaseRelationsProvider(object):
    implements(IRelationshipDataProvider)

    relationship_provider = RP

    def __init__(self, adapted):
        self._object = adapted

    def belongsInImpactGraph(self):
        return True


class BaseTriggers(object):
    implements(INodeTriggers)

    def __init__(self, adapted):
        self._object = adapted
#for $c in $components.values()
#if $c.hasImpact


class ${zenpack.prepname}_${c.shortklass}RelationsProvider(BaseRelationsProvider):
    adapts(${c.shortklass})

    def getEdges(self):
        my_guid = GUID(self._object)

#for $impactedBy in $c.impactedBy
        # Impacted by ${impactedBy.shortklass}
#if $c.impactedBySingle($impactedBy)
XXX FIX
        obj = self._object.${impactedBy.relname}()
        if obj:
            yield ImpactEdge(GUID(obj), my_guid, RP)

#else
        for obj in self._object.${impactedBy.relnames}():
            if isinstance(obj, ${impactedBy.shortklass}):
                yield ImpactEdge(GUID(obj), my_guid, RP)

#end if
#end for
#for $impact in $c.impacts
        # Impacts ${impact.shortklass}
#if $c.impactSingle($impact)
        obj = self._object.${impact.relname}()
        if obj:
            yield ImpactEdge(my_guid, GUID(obj), RP)

#else
        for obj in self._object.${impact.relnames}():
            if isinstance(obj, ${impact.shortklass}):
                yield ImpactEdge(my_guid, GUID(obj), RP)

#end if
#end for
#end if
#end for
