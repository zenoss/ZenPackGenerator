$zenpack.license.header

#for $i in $imports
$i
#end for


class ${shortklass}(#echo ', '.join($klassNames)#):
    meta_type = portal_type = '$portal_type'

#if $properties or $relations
    Klasses = [#echo ', '.join($klassNames)#]

#end if
## Add _properties
#if $properties
#for $key in $properties
#set $p=$properties[key]
    $p.to_assignment()
#end for

    _properties = ()
    for Klass in Klasses:
        _properties = _properties + getattr(Klass, '_properties', ())

    _properties = _properties + (
#for $key in $properties
#set $p=$properties[key]
        {'id': '$p.id', 'type': '$p.type_', 'mode': '$p.mode'},
#end for
        )

#end if
## Add _relations
#if $relations
    _relations = ()
    for Klass in Klasses:
        _relations = _relations + getattr(Klass, '_relations', ())

    _relations = _relations + (
#for $rel in $relationstoArrayofStrings(indent="        ")
$rel
#end for
    )

#end if
#if not $abstract
    factory_type_information = ({
        'actions': ({
            'id': 'perfConf',
            'name': 'Template',
            'action': 'objTemplates',
            'permissions': (ZEN_CHANGE_DEVICE,),
            },),
        },)

#end if
    def device(self):
        '''
        Return device under which this component/device is contained.
        '''
#if $device
        return self
#else
        obj = self

        for i in range(200):
            if isinstance(obj, Device):
                return obj

            try:
                obj = obj.getPrimaryParent()
            except AttributeError as exc:
                raise AttributeError(
                    'Unable to determine parent at %s (%s) '
                    'while getting device for %s' % (
                        obj, exc, self))
#end if                        

#if not $device and not $abstract
    def manage_deleteComponent(self, REQUEST=None):
        """
        Delete Component
        """
        try:
            # Default to using built-in method in Zenoss >= 4.2.4.
            return super(${shortklass}, self).manage_deleteComponent(REQUEST)
        except AttributeError:
            # Fall back to copying the Zenoss 4.2.4 implementation.
            url = None
            if REQUEST is not None:
                url = self.device().absolute_url()
            self.getPrimaryParent()._delObject(self.id)
            if REQUEST is not None:
                REQUEST['RESPONSE'].redirect(url)
#end if
#for $key in $updateComponents
#if $key == '1'
#for $c in $updateComponents['1']

    def get${c.ucrelname}Id(self):
        '''
        Return ${c.relname} id or None.

        Used by modeling.
        '''
        obj = self.${c.relname}()
        if obj:
            return obj.id

    def set${c.ucrelname}Id(self, id_):
        '''
        Set ${c.relname} by id.

        Used by modeling.
        '''
        updateToOne(
            relationship=self.${c.relname},
            root=self.device(),
            type_='${c.type}',
            id_=id_)
#end for
#end if
#if $key == 'M'
#for $c in $updateComponents['M']

    def get${c.ucrelname}Ids(self):
        '''
        Return a sorted list of each id from the ${c.relname} relationship
        Aggregate.

        Used by modeling.
        '''

        return sorted([${c.srelname}.id for ${c.srelname} in self.${c.relname}.objectValuesGen()])

    def set${c.ucrelname}Ids(self, ids):
        '''
        Update ${c.relname} relationship given ids.

        Used by modeling.
        '''
        updateToMany(
            relationship=self.${c.relname},
            root=self.device(),
            type_='${c.type}',
            ids=ids)
#end for
#end if
#end for
#if $displayInfo


class I${shortklass}Info(I${type_}Info):
#if $ManyRelationships
#for $rel in $ManyRelationships
    ${rel.relname_from_component($obj)}_count = schema.Int(title=_t(u'Number of ${$rel.other_component($obj).names}'))
#end for
#end if
#if $properties.values()

#for $prop in $properties.values()
    $prop.id = schema.${prop.Schema}(title=_t(u'$prop.names')$prop.detail_args)
#end for
#end if
#end if
#if $displayIInfo


class ${shortklass}Info(${type_}Info):
    implements(I${shortklass}Info)
#if $properties.values()

#for $prop in $properties.values()
#if $prop.detailDisplay
    $prop.id = ProxyProperty('${prop.id}')
#end if
#end for
#end if
## COMPONENT COUNTS
#if $ManyRelationships
#for $rel in $ManyRelationships

    @property
    def ${rel.relname_from_component($obj)}_count(self):
        # Using countObjects is fast.
        try:
            return self._object.${rel.relname_from_component($obj)}.countObjects()
        except:
            # Using len on the results of calling the relationship is slow.
            return len(self._object.${rel.relname_from_component($obj)}())
#end for
#end if
#end if
##CUSTOM PATHS REPORTERS
#if $custompaths


class ${shortklass}PathReporter(DefaultPathReporter):
    def getPaths(self):
        paths = super(${shortklass}PathReporter, self).getPaths()

#for $path in $custompaths
        obj = self.context.${path[1]}()
        if obj:
            paths.extend(relPath(obj, '${path[3]}'))
#end for

        return paths
#end if
